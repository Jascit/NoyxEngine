#pragma once
#include "type_traits/is_member_function_pointer.hpp"
#include "type_traits/add_rvalue_reference.hpp" 
#include "type_traits/add_lvalue_reference.hpp" 
#include "type_traits/integral_constant.hpp"
#include "type_traits/remove_reference.hpp"
#include "type_traits/is_floating_point.hpp" 
#include "type_traits/remove_volatile.hpp"
#include "type_traits/index_sequence.hpp" 
#include "type_traits/remove_cvref_t.hpp"
#include "type_traits/type_identity.hpp"
#include "type_traits/remove_extent.hpp" 
#include "type_traits/remove_const.hpp"
#include "type_traits/conditional.hpp" 
#include "type_traits/is_function.hpp"
#include "type_traits/conjunction.hpp" 
#include "type_traits/remove_cv.hpp"
#include "type_traits/is_same.hpp"
#include "type_traits/is_enum.hpp"
#include "type_traits/is_void.hpp"
#include "type_traits/void_t.hpp"
#include "type_traits/decay.hpp" 
#include "type_traits/rank.hpp" 
#include "type_traits/is_move_constructible.hpp"
#include "type_traits/is_move_assignable.hpp"
#include "type_traits/swap.hpp" 
#include "type_traits/move.hpp"
#include "type_traits/same_as.hpp"
#include "type_traits/integral.hpp"
#include "type_traits/signed_integral.hpp"
#include "type_traits/floating_point.hpp"
#include "type_traits/remove_pointer.hpp"
#include "type_traits/add_volatile.hpp"
#include "type_traits/disjunction.hpp"
#include "type_traits/enable_if.hpp"
#include "type_traits/add_const.hpp"
#include "type_traits/negation.hpp"
#include "type_traits/extent.hpp"
#include "type_traits/add_cv.hpp"
#include "type_traits/is_integral.hpp"
#include "type_traits/is_unsigned.hpp"
#include "type_traits/is_signed.hpp"
#include "type_traits/is_null_pointer.hpp"
#include "type_traits/is_void.hpp"
#include "type_traits/is_class.hpp"
#include "type_traits/is_union.hpp"
#include "type_traits/is_pointer.hpp"
#include "type_traits/is_array.hpp"
#include "type_traits/is_reference.hpp"
#include "type_traits/remove_all_extents.hpp"
#include "type_traits/add_pointer.hpp"
#include "type_traits/make_signed.hpp"
#include "type_traits/make_unsigned.hpp"
#include "type_traits/is_fundamental.hpp"
#include "type_traits/is_scalar.hpp"
#include "type_traits/is_abstract.hpp"
#include "type_traits/convertible_to.hpp"
#include "type_traits/is_convertible.hpp"
#include "type_traits/is_base_of.hpp"
#include "type_traits/is_trivial.hpp"
#include "type_traits/is_literal_type.hpp"
#include "type_traits/is_trivially_copyable.hpp"
#include "type_traits/has_virtual_destructor.hpp"
#include "type_traits/is_empty.hpp"
#include "type_traits/is_polymorphic.hpp"
#include "type_traits/is_final.hpp"
#include "type_traits/is_layout_compatible.hpp"
#include "type_traits/common_type.hpp"
#include "type_traits/is_arithmetic.hpp"
#include "type_traits/is_member_function_pointer.hpp"
#include "type_traits/is_member_object_pointer.hpp"
#include "type_traits/is_member_pointer.hpp"
#include "type_traits/is_compound.hpp" 
#include "type_traits/is_object.hpp" 
#include "type_traits/is_const.hpp" 
#include "type_traits/is_constructible.hpp" 
#include "type_traits/is_complete.hpp"
#include "type_traits/is_destructible.hpp" 
#include "type_traits/is_assignable.hpp" 
#include "type_traits/underlying_type.hpp" 
#include "type_traits/is_constant_evaluated.hpp" 
#include "type_traits/is_standard_layout.hpp" 
#include "type_traits/is_trivially_move_constructible.hpp" 
#include "type_traits/is_aggregate.hpp" 
#include "type_traits/is_pointer_interconvertible_base_of.hpp" 
#include "type_traits/class_of_member.hpp"

#include "type_traits/reference_wrapper.hpp" // test 
#include "type_traits/copy_cv_ref.hpp" // test 
#include "type_traits/totally_ordered.hpp" // test
#include "type_traits/invoke_result.hpp" // test
#include "type_traits/addressof.hpp" // test
#include "type_traits/equality_comparable.hpp" // test
#include "type_traits/derived_from.hpp" // test
#include "type_traits/common_reference.hpp" // test
